#dat ==> separate (categorical , numerical) ==>
#categrorical dat ==> simpleimputer fill ==> encode
# numerical data ==> dimpleimputer fill ==> standardize

#apply == al

import pandas as pd
import numpy as np

from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# List uploaded files
import os
print(os.listdir())  # Ensure the file name is visible and correct

# Load the uploaded CSV file (use exact file name from upload)
df = pd.read_csv('covid_toy - covid_toy.csv')
print(df.head())

# Separate features and target
x = df.drop(columns=['has_covid'])
y = df['has_covid']

# Train-test split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=2)

# Define categorical and numerical columns
categorical_features = ['gender', 'city']
numerical_features = ['age', 'fever']

# Create transformers
numeric_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='mean')),
    ('scaler', StandardScaler())
])

categorical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])

# Combine transformers
preprocessor = ColumnTransformer(transformers=[
    ('num', numeric_transformer, numerical_features),
    ('cat', categorical_transformer, categorical_features)
])

# Create full pipeline with logistic regression
clf = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('classifier', LogisticRegression())
])

# Train the model
clf.fit(x_train, y_train)

# Make predictions
y_pred = clf.predict(x_test)


